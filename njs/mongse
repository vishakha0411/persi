Lesson 1: Section Intro
In this section, you’ll be creating a REST API using Express. You’ll learn what exactly a
REST API is and how it can be used as the back-end for a web or mobile application. This
section also covers data validation, application architecture, async/await, and more.
Lesson 2: Setting up Mongoose
In this lesson, you’ll be setting up Mongoose. Mongoose makes it easy to model and
manage your application data. This includes data sanitization, data validation, and more.
Mongoose will serve as a replacement for the native driver, providing you with a more
object-oriented interface.
Setting up Mongoose
First up, install Mongoose.
npm i mongoose@5.3.16
Like the MongoDB native driver, Mongoose provides a connect function you can use to
connect to your MongoDB database.
const mongoose = require('mongoose')
mongoose.connect('mongodb://127.0.0.1:27017/task-manager-api', {
useNewUrlParser: true,
useCreateIndex: true
})
Modeling Your Data
The core feature of Mongoose is the ability to model your data. A new model can be
created for the different types of data your application needs to store. You can create as
many models as your application needs.
Version 1.0 67
The code below defines a user model. The model definition is where you define what
makes up a user. This would include all the pieces of data you want to store in the
database. The user model below has just two fields, a name and an age.
const User = mongoose.model('User', {
name: {
type: String
},
age: {
type: Number
}
})
With the model defined, it’s time to start creating and saving users. The User variable
above stores the Mongoose model. This is a constructor function that can be used to
create new users. The snippet below creates a new user with the name 'Andrew' and the
age 27. This alone won’t save any data to the database, but it’s a step in the right direction.
const me = new User({
name: 'Andrew',
age: 27
})
The new model instance can be saved to the database using the save method.
me.save().then(() => {
console.log(me)
}).catch((error) => {
console.log('Error!', error)
})
Documentation Links
• Mongoose
Lesson 3: Creating a Mongoose Model
In this lesson, it’s on you to define a second Mongoose model for tasks.
There are no notes for this challenge video, as no new information is covered. The goal is
to give you experience using what was covered in previous lessons.
Version 1.0 68
Lesson 4: Data Validation and Sanitization: Part I
In this lesson, you’ll set up data validation and sanitization for your models. Validation will
allow you to restrict what data can be stored in the database, while sanitization will allow
you to store user data in a uniform and standardized way.
Data Validation and Sanitization
First up, install validator. While Mongoose provides basic tools for performing validation,
the validator library provides useful methods for validating data such as email addresses,
phone numbers, zip codes, and more.
npm i validator@10.9.0
Mongoose comes with support for basic validation and sanitization. The user model below
shows how this can be configured. required is used to validate that a value is provided for
a given field. trim is used to remove extra spaces before or after data. lowercase is used
to convert the data to lowercase before saving it to the database. You can find a complete
list of options in the schema documentation.
You can also define custom validation for your models. This is done using validate as
shown in the example below. The method gets called with the value to validate, and it
should throw an error if the data is invalid. The example below uses the isEmail method
from validator to validate the email address is valid before saving it to the database.
Version 1.0 69
const mongoose = require('mongoose')
const validator = require('validator')
const User = mongoose.model('User', {
name: {
type: String,
required: true,
trim: true
},
email: {
type: String,
required: true,
trim: true,
lowercase: true,
validate(value) {
if (!validator.isEmail(value)) {
throw new Error('Email is invalid')
}
}
}
})
Documentation Links
• npm: validator
Lesson 5: Data Validation and Sanitization: Part II
In this lesson, it’s up to you to add validation and sanitization to the task model. You’ll also
be defining a new field on the user model with validation and sanitization of its own.
There are no notes for this challenge video, as no new information is covered. The goal is
to give you experience using what was covered in previous lessons.
Lesson 6: Structuring a REST API
In this lesson, you’ll explore REST APIs. You’ll learn how to structure your API and how it
can be used as the back-end for a web or mobile application.
This lesson contains a detailed presentation. Please refer to the video for a recap of how
asynchronous programming works.
Lesson 7: Installing Postman
In this lesson, you’ll set up Postman. Postman makes it easy to test your REST API by
providing you with a set of tools for making HTTP requests. This is not meant to serve as a
Version 1.0 70
replacement for a web or mobile application, it’s just a useful way to debug your endpoints
as you’re creating them.
You can grab Postman here. It’s free and available for all operating systems.
Documentation Links
• Postman
Lesson 8: Resource Creation Endpoints: Part I
In this lesson, you’ll learn how to create REST API endpoints for creating resources. This
will allow users of the API to create new users and new tasks.
Resource Creation Endpoints
Resource creation endpoints use the POST HTTP method. The URL structure is
/resources. If you wanted to create a user, it would be POST /users. If you wanted to
create a task, it would be POST /tasks.
The code below uses app.post to set up a POST request handler for /users. The handler
function creates a new instance of the user model and saves it to the database.
express.json is also setup to parse incoming JSON into a JavaScript object which you
can access on req.body.
app.use(express.json())
app.post('/users', (req, res) => {
const user = new User(req.body)
user.save().then(() => {
res.send(user)
}).catch((e) => {
res.status(400).send(e)
})
})
Lesson 9: Resource Creation Endpoints: Part II
In this lesson, it’s on you to set up a new endpoint for creating tasks.
There are no notes for this challenge video as no new information is covered. The goal is
to give you experience using what was covered in previous lessons.
Version 1.0 71
Lesson 10: Resource Reading Endpoints: Part I
In this lesson, you’ll learn how to create REST API endpoints for reading resources. This
will allow users of the API to fetch users and tasks from the database.
Resource Reading Endpoints
Resource reading endpoints use the GET HTTP method. The URL structure is /resources
for a list of resources and /resources/:id for fetching an individual resource by its ID. If
you wanted to fetch all your tasks, it would be GET /tasks. If you wanted to fetch an
individual task with the ID of 198, it would be GET /tasks/198.
The code below uses app.get to set up a GET request handler for /users/:id. :id serves
as a placeholder for the ID of the user to fetch. If the request is GET /users/321, then the
ID will be 321. This is known as a URL parameter, and you can access the value for URL
parameters on req.params.
app.get('/users/:id', (req, res) => {
const _id = req.params.id // Access the id provided
User.findById(_id).then((user) => {
if (!user) {
return res.status(404).send()
}
res.send(user)
}).catch((e) => {
res.status(500).send()
})
})
Documentation Links
• Express route parameters
Lesson 11: Resource Reading Endpoints: Part II
In this lesson, it’s on you to create REST API endpoints for fetching tasks out of the
database.
There are no notes for this challenge video, as no new information is covered. The goal is
to give you experience using what was covered in previous lessons.
Version 1.0 72
Lesson 12: Promise Chaining
In this lesson, you’ll explore promise chaining. Promise chaining is a syntax that allows you
to chain together multiple asynchronous tasks in a specific order. This is great for complex
code where one asynchronous task needs to be performed after the completion of a
different asynchronous task.
Promise Chaining
To demonstrate promise chaining, the following function will be used to simulate an
asynchronous task. In reality, it’s just adding up a couple of numbers, waiting two seconds,
and fulfilling the promise with the sum.
const add = (a, b) => {
return new Promise((resolve, reject) => {
setTimeout(() => {
if (a < 0 || b < 0) {
return reject('Numbers must be non-negative')
}
resolve(a + b)
}, 2000)
})
}
With the dummy asynchronous function defined, promise chaining can be used to call add
twice. The code below adds up 1 and 2 for a total of 3. It then uses the sum of 3 as the
input for another call to add. The second call to add adds up 3 and 4 for a total of 7.
Promise chaining occurs when the then callback function returns a promise. This allows
you to chain on another then call which will run when the second promise is fulfilled. catch
can still be called to handle any errors that might occur along the way.
Version 1.0 73
add(1, 2).then((sum) => {
console.log(sum) // Will print 3
return add(sum, 4)
}).then((sum2) => {
console.log(sum2) // Will print 7
}).catch((e) => {
console.log(e)
})
Lesson 13: Promise Chaining Challenge
In this lesson, it’s on you to use promise chaining to complete a programming challenge.
There are no notes for this challenge video, as no new information is covered. The goal is
to give you experience using what was covered in previous lessons.
Lesson 14: Async/Await
In this lesson, you’ll learn how to use async and await. These provide an improved syntax
for working with promises. You’ll be able to write complex asynchronous code that looks
like normal synchronous code. This makes it much easier to write and maintain
asynchronous code.
Exploring Async/Await
The example below uses the add function that was created two lessons ago.
The first step to using async and await is to create an asynchronous function. This is done
using the async keyword before the function definition. This can be seen in the definition
of doWork below. Any function can be defined as an asynchronous function, not just arrow
functions.
With an async function in place, you can now use the await operator. The await operator
can only be used inside of asynchronous functions. This removes the need for excess
callbacks and makes code much easier to read.
The await operator is used with promises in asynchronous functions. You can see this
used three times in doWork. The await operator allows you to work with promises in a way
that looks like synchronous code. If the promise is fulfilled, the fulfilled value can be
accessed as the return value from the function. If the promise is rejected, it would be as
though the function threw an error. await will pause the function execution until the
promise is either fulfilled or rejected.
Version 1.0 74
It’s important to note that async and await are syntax enhancements for working with
promises. Promises are still at the core of asynchronous code that uses async and await.
const doWork = async () => {
const sum = await add(1, 99)
const sum2 = await add(sum, 50)
const sum3 = await add(sum2, 3)
return sum3
}
doWork().then((result) => {
console.log('result', result)
}).catch((e) => {
console.log('e', e)
})
Documentation Links
• mdn: async function
• mdn: await operator
Lesson 15: Async/Await: Part II
In this lesson, it’s up to you to use async and await with the Mongoose library.
There are no notes for this challenge video, as no new information is covered. The goal is
to give you experience using what was covered in previous lessons.
Lesson 16: Integrating Async/Await
In this lesson, you’ll be integrating async and await into the Express route handlers.
Integrating Async/Await
Below is a modified version of GET /users. The handler function was set up as an
asynchronous function which allows you to use await in the function. await is used with
the promise from User.find to get a list of all the users without needing to call then and
catch with handler functions. A try/catch statement is also used to handle any errors that
might occur.
Version 1.0 75
app.get('/users', async (req, res) => {
try {
const users = await User.find({})
res.send(users)
} catch (e) {
res.status(500).send()
}
})
Lesson 17: Resource Updating Endpoints: Part I
In this lesson, you’ll learn how to create REST API endpoints for updating resources. This
will allow users of the API to update users and tasks that are already in the database.
Resource Updating Endpoints
Resource updating endpoints use the PATCH HTTP method. The URL structure is
/resources/:id for updating an individual resource by its ID. If you want to update an
individual task with the ID of 44, it would be PATCH /tasks/44.
app.patch is used to set up the Express route handler.
app.patch('/users/:id', async (req, res) => {
// Route handler code here
})
When working with updates, it’s a good idea to alert the user if they’re trying to update
something that they can’t update. The code below checks that the user is only updating
fields that can be updated, otherwise it will send back an error response.
const updates = Object.keys(req.body)
const allowedUpdates = ['name', 'email', 'password', 'age']
const isValidOperation = updates.every((update) =>
allowedUpdates.includes(update))
if (!isValidOperation) {
return res.status(400).send({ error: 'Invalid updates!' })
}
If all goes well, the updates will be applied to the user, then a response will be sent back.
Version 1.0 76
If the provided updates are valid, findByIdAndUpdate can be used to update the
document in the database. Try/catch is used here to send back an error if something goes
wrong when updating the user. This would include the new data not passing the validation
defined for the model.
try {
const user = await User.findByIdAndUpdate(req.params.id, req.body, { new:
true, runValidators: true })
if (!user) {
return res.status(404).send()
}
res.send(user)
} catch (e) {
res.status(400).send(e)
}
Lesson 18: Resource Updating Endpoints: Part II
In this lesson, it’s on you to create REST API endpoints for deleting tasks out of the
database.
There are no notes for this challenge video, as no new information is covered. The goal is
to give you experience using what was covered in previous lessons.
Lesson 19: Resource Deleting Endpoints
In this lesson, you’ll learn how to set up a REST API endpoint for deleting resources. This
video covers deleting users as well as a challenge for deleting tasks.
Deleting Resources
Resource deleting endpoints use the DELETE HTTP method. The URL structure is
/resources/:id for deleting an individual resource by its ID. If you want to delete an
individual task with the ID of 897, it would be DELETE /tasks/897.
app.delete is used to set up the Express route handler.
Version 1.0 77
app.delete('/users/:id', async (req, res) => {
// Route handler
})
The handler itself can delete the resource using findByIdAndDelete.
try {
const user = await User.findByIdAndDelete(req.params.id)
if (!user) {
return res.status(404).send()
}
res.send(user)
} catch (e) {
res.status(500).send()
}
Lesson 20: Separate Route Files
In this lesson, you’ll learn how to organize your Express application endpoints. Defining all
endpoints in a single file is a fine way to get started, but that won’t scale well as you add
more routes to the app.
Creating Separate Routers
Express allows you to create as many routers as you want. These separate routers can
then be combined into a single Express application. You can create a new router using
express.Router as shown below. The example file below creates the router, adds routes,
and exports the router from the file.
const router = new express.Router()
router.post('/someEndpoint', (req, res) => {
// Do something
})
module.exports = router
The router defined in the file above can be added into the Express application in
index.js. This is done by loading the router in with require and then passing the router
Version 1.0 78
to app.use. You can set up as many routers as you need for your application, though it’s
common to have a router for each distinct resource your REST API has.
// Register with existing application
app.use(router)
Documentation Links